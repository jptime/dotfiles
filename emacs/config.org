

* Personal Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "John Petty"
      user-mail-address "john.petty@hypersign.com")
#+END_SRC


* Interface
Just some nice user interfaces tweaks. Bread and butter stuff!
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
(setq-default indent-tabs-mode nil)
(setq ring-bell-function 'ignore)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)

(use-package powerline
  :ensure t
  :config
    (powerline-center-evil-theme))


(set-face-attribute 'default nil
                    :family "Inconsolata"
                    :height 160
                    :weight 'normal
                    :width 'normal)

#+END_SRC


* General
#+BEGIN_SRC emacs-lisp

(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files 
(show-paren-mode 1)

;; OSX fix for eslint lookup

(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

 (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

(defun reload-config-file()
  (interactive)
  (org-babel-load-file "~/.emacs.d/config.org"))

(defun open-config-file()
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(defun init-install()
  (setq use-package-always-ensure t)
  reload-config-file())
(defun kill-other-buffers (&optional arg)
  "Kill all other buffers.
If the universal prefix argument is used then will the windows too."
  (interactive "P")
  (when (yes-or-no-p (format "Killing all buffers except \"%s\"? "
                             (buffer-name)))
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (when (equal '(4) arg) (delete-other-windows))
    (message "Buffers deleted!")))
#+END_SRC


* Ivy/Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-re-builders-alist
   '((t . ivy--regex-ignore-order)))

  :bind
  ("s-f" . swiper))
#+END_SRC

  
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :config
  (add-hook 'prog-mode-hook 'flycheck-mode)
  (setq-default flycheck-disabled-checker 'javascript-jshint)
  (setq-default flycheck-disabled-checker 'json-jsonlist)
  ;; (setq-default flycheck-disabled-checker 'javascript-eslint)
  ;; (setq-default flycheck-javascript-eslint-executable "eslint-project-relative")
  (flycheck-add-mode 'javascript-eslint 'web-mode)
)

(defun eslint-fix-file ()
  (interactive)
  (message "eslint --fixing the file" (buffer-file-name))
  (shell-command (concat "eslint --fix " (buffer-file-name))))

(defun eslint-fix-file-and-revert ()
  (interactive)
  (eslint-fix-file)
  (revert-buffer t t))
#+END_SRC


* Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config 
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-tooltip-align-annotations t)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 2)
)
#+END_SRC  


* Theme
#+begin_src emacs-lisp
(use-package dracula-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src


* Evil
Evil complements the emacs ecosystem perfectly. The first thing I do is get this set up!
It's super important to have the leader keymap as well, so that I can perform all my combinations super fast.
A lot of these keybindings have been heavily influenced from spacemacs.
I like to throw in magit support and surround support too.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :diminish evil-mode
  :init 
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1))
(use-package evil-nerd-commenter
  :ensure t
  :commands (evilnc-comment-or-uncomment-lines)
  :init
)
(use-package key-chord
:ensure t
:init
  (key-chord-mode 1)
  (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
)

(use-package evil-leader
  :ensure t
  :config
  (evil-leader/set-leader "SPC")
  (evil-leader/set-key
   "SPC" 'counsel-M-x
   "[" 'previous-error
   "]" 'next-error
   ";" 'evilnc-comment-or-uncomment-lines
   "bb" 'ivy-switch-buffer
   "bl" 'dired
   "bd" 'kill-buffer
   "bk" 'kill-this-buffer
   "bD" 'kill-other-buffers
   "bn" 'next-buffer
   "bp" 'previous-buffer
   "eb" 'eval-buffer
   "er" 'eval-region
   "fs" 'save-buffer
   "fo" 'open-org-file
   "fc" 'open-calendar-file
   "ff" 'counsel-find-file
   "fr" 'counsel-recentf
   "fed" 'open-config-file
   "feR" 'reload-config-file
   "sg" 'counsel-git-grep
   "tl" 'toggle-truncate-lines
   "wd" 'evil-window-delete
   "ww" 'ace-window
   "wo" 'delete-other-windows
   "wj" 'evil-window-down
   "wk" 'evil-window-up
   "wh" 'evil-window-left
   "wl" 'evil-window-right
   "w/" 'evil-window-vsplit
   "ws" 'evil-window-split)
  (global-evil-leader-mode))
  (kill-buffer "*Messages*")
  (use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode))
#+END_SRC


* Code
Our favourite languages!
** C#
#+BEGIN_SRC emacs-lisp
(use-package cl
   :ensure t
   :config
)
(use-package csharp-mode
   :ensure t
   :config
)
(use-package omnisharp
  :ensure t
  :config
  (add-hook 'csharp-mode-hook 'omnisharp-mode))
(eval-after-load
 'company
 '(add-to-list 'company-backends 'company-omnisharp))
#+END_SRC 
** Javascript
Everybody uses JSON now, this make things look very pretty
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
#+END_SRC

** C++

#+BEGIN_SRC emacs-lisp
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(use-package irony
  :ensure t
  :config
  (progn
    (use-package company-irony
      :ensure t
      :config
      (add-to-list 'company-backends 'company-irony))
    (add-hook 'irony-mode-hook 'electric-pair-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))
#+END_SRC

   
* Modes
** RJSX mode 
inherits js2-mode and supports jsx well. In my experience it's better than js2-jsx-mode, so I use it instead.
We set basic offsets and also unmap vim C-d in insert mode, so that we can use the nice tag completion
We also integrate with Tide here, so that we can jump back and forth across definitions
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :config
  (evil-leader/set-key-for-mode 'rjsx-mode
    "mf" 'tide-jump-to-definition
    "mb" 'tide-jump-back
    "mk" 'eslint-fix-file)
  (setq js2-basic-offset 2)
  (define-key evil-insert-state-map (kbd "C-d") nil)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
  ;; (add-hook 'js2-mode-hook
  ;;         (lambda ()
  ;;           (add-hook 'after-save-hook #'eslint-fix-file-and-revert)))
)
#+END_SRC
** Web-mode
   Bread and butter web-mode. Highlighting for all things html/css
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq css-indent-offset 2))
  (add-hook 'web-mode-hook  'my-web-mode-hook))
#+END_SRC
** Tide-mode
Tide mode utilises Microsoft's excellent typescript tooling. Tide mode provides excellent code completion, formatting and syntax checking.
#+BEGIN_SRC emacs-lisp
(use-package tide
  :ensure t
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (tide-setup)
    (tide-hl-identifier-mode +1)
   )
  (add-hook 'js2-mode-hook  #'setup-tide-mode)
)
#+END_SRC

** Markdown
I try to use org files where possible, but markdown is super useful sometimes for projects. You can install live export tools as well, but I tend not to.
#+BEGIN_SRC EMACS-LISP
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode))
#+END_SRC 


* Tools
** SmartParens
#+BEGIN_SRC emacs-lisp
   (use-package smartparens
   :ensure t
   :diminish smartparens-mode
   :config
   (progn
     (require 'smartparens-config)
     (smartparens-global-mode 1)))
#+END_SRC     
** Magit
Magit is quite magical. I'm a huge fan of shelling out to command line when possible, but magit is a lot more intuitive, helpful and efficient.
Combined with evil-magit and this is my favourite way of doing version control.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands magit-status
  :init
  (use-package evil-magit
    :ensure t)
  (evil-leader/set-key
   "gs" 'magit-status))
#+END_SRC

** NeoTree
   We need an evil tree! Coupled with some major mode evil bindings and we're in action
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (evil-define-key 'normal neotree-mode-map 
    (kbd "TAB") 'neotree-enter
    "H" 'neotree-hidden-file-toggle
    "q" 'neotree-hide
    (kbd "RET") 'neotree-enter)

  (evil-leader/set-key-for-mode 'neotree-mode 
    "mo" 'neotree-open-file-in-system-application
    "md" 'neotree-delete-node
    "mr" 'neotree-rename-node
    "mc" 'neotree-create-node)

  (setq neo-theme 'nerd)
  (setq neo-window-fixed-size nil)
  (setq neo-smart-open t))
  (setq neo-window-width 40)
  (setq neo-default-system-application "open")
#+END_SRC
** Projectile
Projectile is awesome for searching and handling projects.
I ignore ~node_modules~ naturally and also have some evil bindings for easily accessing projects using leader keys
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-find-file projectile-switch-project)
  :init
  (evil-leader/set-key
    "pf" 'projectile-find-file
    "pp" 'projectile-switch-project
    "pb" 'projectile-switch-buffer
    "ft" 'neotree-toggle
    "pt" 'neotree-find-project-root)
  :config
  (setq projectile-completion-system 'ivy)
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (projectile-global-mode))
#+END_SRC
** Which Key
Awesome package for key discovery!
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

** Web-Beautify 
Beautify All The Things
#+BEGIN_SRC emacs-lisp
(use-package web-beautify
  :ensure t
  :config
  )
#+END_SRC


* Fun Stuff
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+END_SRC     
